[[prefix-definitions]]
### Prefix definitions

The prefix definitions configuration file is used to specify what file paths users are
allowed to access using what prefixes. It also serves as a means to provide user access
control to certain prefixes if desired.

Special prefixes can be defined here that expand to directories or paths.
Suppose, for example, that the administrator specifies
`DIR="file:/home/user/kite/"` in this file. Then whenever the user references
`DIR$subdir/data.txt` (s)he will access the `file:/home/users/kite/subdir/data.txt`.
Moreover, there is no other way a user can refer to that file (unless there are
other prefixes defined here that make this possible).

*Format:*

Lines that begin with a hashmark (`#`) are comments and ignored.

Prefix symbols should only contain capital letters, underscore,
and digits; the first character cannot be a digit.
The dollar sign is NOT part of the prefix symbol.

The paths that they define should either be empty, or
end in an at sign (`@`) or end in a slash (`/`).
The defined paths should always start with a file system specification (e.g. `s3n:` or `file:`)
unless they are empty.
The quotation marks are not part of the path, but they should still be supplied.

Local prefixes (the ones starting with `file:/`) only work on
single-machine LynxKite installations. On distributed LynxKite installations, you will need
to use a distributed file system, like HDFS or S3.

*Examples:*

```
# LOCAL1="file:/home/user/old_kite_data/"
# LOCAL2="file:/home/user/old_kite_data2/"
# S3N_OLD_DIR="s3n://key:pwd@old_kite_data/"
# S3N_OLD_DIR2="s3n://key:pwd@"
# EMPTY=""
```

A specification of `EMPTY` such as the one above gives the user
full access to anything; e.g., they can say
`EMPTY$s3n://key:password@somedir/somefile` or `EMPTY$file://etc/passwd`.

[[prefix-based-access-control]]
#### Prefix-based access control

Prefix symbol endings `_READ_ACL` and `WRITE_ACL` have a special meaning: instead of specifying
a path, they specify user access privileges for a given prefix. Suppose you have defined the
following prefix:

```
# SENSITIVE_DATA="hdfs://sensitive_data/"
```

By default, all users are allowed to access files such as `SENSITIVE_DATA$secret.csv`. This can
be changed by adding two extra lines to the prefix definition file, for example:

```
# SENSITIVE_DATA_READ_ACL="*@mycompany.com"
# SENSITIVE_DATA_WRITE_ACL="jack@mycompany.com,jill@mycompany.com"
```

This gives read access to all users at `mycompany.com` and write access to users `jack`, and `jill`
(In general, an access control list is comma-delimited; `*` (asterisk)
can be used as a wildcard; `*` means all logged in users.
`*@lynxanalytics.com`, for example, means all users with user names matching that pattern.)

Note that this implies that you cannot have a prefix symbol that ends in `_READ_ACL` or `_WRITE_ACL`
because that would be interpreted as an access control specification.

Specifying neither read nor write access for a prefix implies `*` access; that is, any user can
read or write files accessed via that prefix. But if you specify either access type, you must
specify the other access type as well.

It is important to note that access control checks only the prefixes, but not the files itself. So,
in such a setting

```
# ROOT="hdfs://root/"
# SENSITIVE_DATA="hdfs://root/sensitive_data/"
# SENSITIVE_DATA_READ_ACL="*@mycompany.com"
# SENSITIVE_DATA_WRITE_ACL="boss@mycompany.com"
```

there is no use in providing read and write access to your sensitive data, because
although only `boss@mycompany.com` can write `SENSITIVE_DATA$secret.csv`, anyone
can read and write `ROOT$sensitive_data/secret.csv`, which is the same file.
So if you use prefix-based access control, make sure that the data protected is not
accessible via another prefix.
