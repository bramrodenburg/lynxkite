[[batch-mode]]
## Batch processing API

LynxKite can be run in two modes. The first is a long-running server that offers an interactive
user interface. (This is documented in the rest of this guide.) The other is *batch mode* wherein
LynxKite executes a script and terminates when it is finished. This is useful for running periodic
tasks and for integrating with other systems.

The batch mode cannot be run at the same time as interactive mode. The two modes operate on the
same data. So a batch script could apply changes to a graph created in interactive mode, or
conversely interactive mode could be used to explore a graph created in batch mode, simply by
using the same project names.

Usage:

[subs=normal]
 ./run-kite.sh batch _script_file_ [_parameters_]

Where `_parameters_` is a list of `key:value` pairs.

### Script file syntax

Batch script files are written in the http://www.groovy-lang.org/[Groovy] programming language.

The script will receive the command line arguments in the `params` map that is injected into its
namespace.

The script can interact with LynxKite through the `lynx` object that is injected into its
namespace.

 - `GroovyProject lynx.project(String name)` will return the given project,
   creating it if it does not yet exist.
 - `GroovyProject lynx.newProject(String name)` will return the given project,
   resetting it to an empty state if it has already existed.

The properties of `GroovyProject` are:

 - `Map<String, GroovyProject> segmentations` is the list of segmentations for the project.
 - `Map<String, GroovyScalar> scalars` is the list of scalars. `GroovyScalar` has a `toString()`
   and a `toDouble()` method, they return its value as a string/double respectively.
 - `Map<String, GroovyAttribute> vertexAttributes` and `Map<String, GroovyAttribute> edgeAttributes`
   are the vertex and edge attributes. `GroovyAttribute` has a `histogram()` method that returns
   a histogram of the attribute.

`GroovyProject` has a method for every operation. These methods take named arguments for each
operation parameter. Rather than documenting these methods in detail, the recommended approach is
to run the operations in interactive mode, enter the <<project-history, history editor>> and the
<<saving-a-workflow, workflow editor>> within. The correct Groovy code can then be copied from the
workflow editor.

`GroovyProject` also has a method `saveAs`. You can use this to save a project by a new name. It
returns a `GroovyProject` object pointing to the project with the new name.

### Full example

In this example we create a script that reads edges from a CSV file, calculates PageRank, exports
PageRank to another CSV, and prints the number of vertices and the time the whole script took.

----
start_time = System.currentTimeMillis()
// Import input, calculate PageRank, export output.
project = lynx.project('Batch PageRank')
project.importVerticesAndEdgesFromSingleCSVFileset(
  files: params['input'],
  header: '<read first line>',
  delimiter: ',',
  src: 'src',
  dst: 'dst',
  filter: '',
  allow_corrupt_lines: 'no',
  omitted: '')
project.pageRank(
  name: 'page_rank',
  weights: '!no weight',
  iterations: '5',
  damping: '0.85')
project.exportVertexAttributesToFile(
  path: params['output'],
  link: 'exported_csv',
  attrs: 'stringID,page_rank',
  format: 'CSV')

// Print metrics.
count = project.scalars['vertex_count']
time = (System.currentTimeMillis() - start_time) / 1000
println "$count vertices processed in $time seconds."
----

When running the script we must use <<prefixed-paths>> for the file names. For example:

 ./run-kite.sh batch pagerank.groovy input:UPLOAD$/data-2015.csv output:UPLOAD$/pagerank-2015.csv

See the `kitescripts` directory in the LynxKite installation for more complex example scripts.
