## Attribute filter syntax

The filtering syntax depends on the type of the attribute.

* For `String` and `Long` types the filter is a comma-separated list of values you want to match.
For example `medium,high` would be a String filter to match these two values only, e.g. it would
exclude "low" values.

* For `String` attributes, regex filters can also be applied. The syntax is `regex(xyz)` for example
for finding strings that contain "xyz". Or `regex(^Ab)` for strings that start with `Ab`. Or
`regex((.)\1)` for strings with double letters.

* For the `Double` type multiple options are available.
** You can enter a simple number to match values exactly.
For example `3` would select only the values that are exactly 3.0.
** You can specify bounds, with the `<`, `>`, `<=`, `>=` operators.
For example `>=12.5` will match values no less than 12.5.
** `=` and `==` are also accepted as operators, providing exact matching.
** Intervals can be specified with brackets. The parenthesis (`( )`) denotes an exclusive boundary
and the square bracket (`[ ]`) denotes an inclusive boundary. The lower and upper boundaries can be both
inclusive or exclusive, or they can be different.
For example `[0,10)` will match x if 0 &le; x < 10.

* For the `Vector` type the following options are available.
** `all(...)` will match the `Vector` only when the internal filter matches all elements of the `Vector`.
`forall` and `Ɐ` are synonyms of all. For example `all(<0)` for a `Vector[Double]` will match
when the `Vector` contains no positive items. (This would include empty `Vector` values.)
** `any(...)` will match the `Vector` only when the internal filter matches at least one element of the `Vector`.
`exists`, `some`, and `∃` are synonyms of `any`.
For example `any(male)` for a `Vector[String]` will match when the Vector contains at least one "male".
(This would not include empty vectors, but would include those where all elements are "male".)

Any filter can be prefixed with `!` to negate it. For example `!medium` will exclude
"medium" values.
