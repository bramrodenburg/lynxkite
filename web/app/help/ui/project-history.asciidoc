## Project history

Clicking the +++<label class="btn btn-default"><i class="glyphicon glyphicon-time"></i></label>+++ button on
the <<project-header,project header>> switches the project to history mode. In history mode the sequence of
operations that had been performed on the project are displayed and may be edited.

// TODO: Embed example history view.

The history mode is useful for a number of purposes:

- *To review the process* that was used to reach the end results. History mode can tell you what files were
imported at the beginning, what operations were used and with what parameters.
- *To make changes to the process.* For example after a string of operations you start to wonder what the
results would look like had you filtered the dataset to just one gender at the very start. You can insert
the filter in history mode. When you save the change the project will reflect the altered history.
- *To create a new composite operation* (a _workflow_) from a sequence of operations that you have performed
on the project.

Visualizations are disabled in history mode.

Press the +++<label class="btn btn-default"><i class="glyphicon glyphicon-arrow-left"></i></label>+++ button
to return to the regular project view.

### Modifying an operation

The parameters of the operations are all editable in history mode. The operation category icons can be used
to pick a different operation to run in the same place.

Once you are happy with the changes to an operation press _OK_. The changes may make some later steps in
the history inconsistent. (For example if you changed the name of an attribute and later steps refer to the old
name.) Inconsistent operations will have a red background and an error message describing the problem.
Operations below an inconsistent operation will be uneditable -- the inconsistency must be fixed before
proceeding.

Operations with a grey background have already been executed. It is possible to have an error message on a
grey operation -- this can happen as a result of upgrading LynxKite, for example if a new parameter is added.
An error message on a grey operation does not need to be fixed as long as the operations before it remain
unchanged.

The modified history can be saved with the
+++<label class="btn btn-default"><i class="glyphicon glyphicon-floppy-disk"></i></label>+++ button.
The modified history can be saved over the original project, or can be saved under a new name.
If the history is inconsistent this button is replaced with the
+++<label class="btn btn-warning"><i class="glyphicon glyphicon-exclamation-sign"></i></label>+++ icon.

### Deleting an operation

Select _Discard operation_ from the drop-down menu
(+++<a href class="btn-dropdown dropdown-toggle" dropdown-toggle><span class="caret"></span></a>+++)
on the bottom right of the operation.

### Adding a new operation

Select _Insert operation above_ or _Insert operation below_ from the drop-down menu
(+++<a href class="btn-dropdown dropdown-toggle" dropdown-toggle><span class="caret"></span></a>+++)
on the bottom right of the operation. A <<no-operation>> placeholder will be inserted at the selected point.
The placeholder can be replaced with the desired operation.

If the project has segmentations at that point in its history, the dropdown will also offer to insert new operations
on the available segmentations instead of the base project.

### Saving a workflow

Workflows are user-defined composite operations, themselves made up of other operations.
Workflows can be created in history mode from the history of the existing project.
Press +++<label class="btn btn-default"><i class="glyphicon glyphicon-film"></i></label>+++ to turn the history
into a workflow. The source code of the workflow can then be edited.

The source code of a workflow is in the http://www.groovy-lang.org/[Groovy] programming language.
Workflows are restricted to executing operations on the project. (They cannot, for example, read files.)
Creating a workflow from a project history has the benefit that the sequence of operations will always be
consistent, and you never have to look up the exact syntax for the workflow definition.

The history typically includes some setup steps that should not be part of the workflow. Simply delete these
steps from the workflow source code.

Workflows can have parameters too. Use `params['my parameter']` in the source, and
the workflow will have a parameter called _"my parameter"_.

.Example workflow with a parameter:
----
// Generates a random graph of a given size.
project.newVertexSet(size: params['size'])
project.createScaleFreeRandomEdgeBundle(
  iterations: 5,
  perIterationMultiplier: 1.6,
  seed: 0)
----

See the <<batch-mode>> for a fully scriptable interface to LynxKite.
