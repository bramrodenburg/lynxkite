// Operation descriptions.

# Operations

LynxKite's operations make it possible to modify a graph. There are operations for adding new
attributes (such as <<Compute PageRank>>), changing the graph structure (such as
<<reverse-edge-direction>>), importing and exporting data, and for creating <<segmentations>>.

All operations can be undone, so they are safe to experiment with.

## The operation toolbox

There are several ways to invoke an operation. If you know its name, typing the slash
key (`/`) will bring up the search menu, where operations can be found by name. The same menu
can be accessed via the magnifier icon
(+++<i class="glyphicon glyphicon-search"></i>+++).
Some find it the most convenient way to access the desired operation.

In case you do not know the name of the operation, functional groups called "categories" will help
you find what you need. These categories are listed below, along with their toolbox icon.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category blue">V</div></div></div>+++ Vertex attribute operations

These operations manipulate (create, discard, convert etc.) vertex attributes.
These operations perform their task without looking at other
edges or vertices and they are not available if the graph has no vertices.
Example: <<add-constant-vertex-attribute>>.


### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category blue">E</div></div></div>+++ Edge attribute operations

These operations are similar to vertex attribute operations, but they manipulate
edge attributes. They are not available if the graph has no edges.
Example: <<add-random-edge-attribute>>.


### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="glyphicon glyphicon-th-large"></i></div></div></div>+++ Create segmentation

These operations create <<segmentations>>.
Example: <<connected-components>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category magenta"><i class="glyphicon glyphicon-globe"></i></div></div></div>+++ Global operations

Operations in this category manipulate global graph attributes (aka scalars). For example,
<<discard-scalar>> removes such global attributes, whereas <<correlate-two-attributes>>
computes the Pearson correlation coefficient of two attributes, and stores the result
in a scalar.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="glyphicon glyphicon-stats"></i></div></div></div>+++ Graph metrics

Graph metrics operations are similar to the vertex (or edge) attribute operations inasmuch
as they compute new attributes for each vertex (or edge). However, they are somewhat more
complex, since they are not restricted to that single vertex (or edge) in their computation. For example,
<<degree>> creates a vertex attribute that depends on how many neighbors a given vertex has, so
it depends on the neighborhood of the vertex. A more complex example is <<pagerank>>, which
is not even restricted on the immediate neighborhood of a vertex: it depends on the entire graph.
One might say that this category is about metrics that describe the graph structure in some way.


### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="glyphicon glyphicon-import"></i></div></div></div>+++ Import operations

These operations import external data to LynxKite. Example: <<import-edge-attributes>>.


### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category pink"><i class="glyphicon glyphicon-knight"></i></div></div></div>+++ Machine learning operations

These operations perform machine learning. A machine learning model is trained on a set of data, and
it can perform prediction or classification on a new set of data. For example, a logistic regression
model can be trained by the operation <<train-a-logistic-regression-model>> and it can classify new
data with the operation <<classify-vertices-with-a-model>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="glyphicon glyphicon-fullscreen"></i></div></div></div>+++ Propagation operations

These operations compute vertex attributes from attributes of their neighboring elements.
They only differ in how we define "neighboring elements". For example, in operation
<<aggregate-to-segmentation>>, these neighboring elements are all the vertices that
belong to the same segment (the segment being the vertex whose attribute this operation
computes). Another example is <<aggregate-edge-attribute-to-vertices>>; in this case
the "neighboring elements" are the edges that leave or enter the vertex. Yet another
example is <<aggregate-on-neighbors>>; the "neighboring elements" here are the other
vertices connected to the vertex.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="glyphicon glyphicon-book"></i></div></div></div>+++ Speciality operations

These operations implement algorithms that were specially designed for LynxKite. Examples:
<<fingerprinting-between-project-and-segmentation>>, and <<viral-modeling>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category pink"><i class="glyphicon glyphicon-asterisk"></i></div></div></div>+++ Structure operations

The operations in this category can change the overall graph structure by adding or
discarding vertices and/or edges. Examples: <<add-reversed-edges>>, and <<new-vertex-set>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category pink">U</div></div></div>+++ Workflow operations

This is where the workflows defined by the users can be found.


## The list of operations

// Autogenerated content below this line. Run generate-index.sh to regenerate.

include::add-comment.asciidoc[]

include::add-constant-edge-attribute.asciidoc[]

include::add-constant-vertex-attribute.asciidoc[]

include::add-gaussian-vertex-attribute.asciidoc[]

include::add-random-edge-attribute.asciidoc[]

include::add-random-vertex-attribute.asciidoc[]

include::add-rank-attribute.asciidoc[]

include::add-reversed-edges.asciidoc[]

include::aggregate-edge-attribute-globally.asciidoc[]

include::aggregate-edge-attribute-to-vertices.asciidoc[]

include::aggregate-from-segmentation.asciidoc[]

include::aggregate-on-neighbors.asciidoc[]

include::aggregate-to-segmentation.asciidoc[]

include::aggregate-vertex-attribute-globally.asciidoc[]

include::anchor.asciidoc[]

include::approximate-clustering-coefficient.asciidoc[]

include::approximate-embeddedness.asciidoc[]

include::change-project-notes.asciidoc[]

include::check-cliques.asciidoc[]

include::classify-vertices-with-a-model.asciidoc[]

include::coloring.asciidoc[]

include::combine-segmentations.asciidoc[]

include::compare-segmentation-edges.asciidoc[]

include::compute-centrality.asciidoc[]

include::compute-clustering-coefficient.asciidoc[]

include::compute-degree.asciidoc[]

include::compute-dispersion.asciidoc[]

include::compute-embeddedness.asciidoc[]

include::compute-pagerank.asciidoc[]

include::connect-vertices-on-attribute.asciidoc[]

include::convert-edge-attribute-to-double.asciidoc[]

include::convert-edge-attribute-to-string.asciidoc[]

include::convert-vertex-attribute-to-double.asciidoc[]

include::convert-vertex-attribute-to-string.asciidoc[]

include::convert-vertex-attributes-to-position.asciidoc[]

include::convert-vertices-into-edges.asciidoc[]

include::copy-edge-attribute.asciidoc[]

include::copy-edges-to-base-project.asciidoc[]

include::copy-edges-to-segmentation.asciidoc[]

include::copy-graph-into-a-segmentation.asciidoc[]

include::copy-scalar-from-other-project.asciidoc[]

include::copy-scalar.asciidoc[]

include::copy-segmentation.asciidoc[]

include::copy-vertex-attribute.asciidoc[]

include::copy-vertex-attributes-from-segmentation.asciidoc[]

include::copy-vertex-attributes-to-segmentation.asciidoc[]

include::correlate-two-attributes.asciidoc[]

include::create-edges-from-co-occurrence.asciidoc[]

include::create-edges-from-set-overlaps.asciidoc[]

include::create-example-graph.asciidoc[]

include::create-plot.asciidoc[]

include::create-random-edge-bundle.asciidoc[]

include::create-scale-free-random-edge-bundle.asciidoc[]

include::create-vertices.asciidoc[]

include::define-segmentation-links-from-matching-attributes.asciidoc[]

include::derive-edge-attribute.asciidoc[]

include::derive-scalar.asciidoc[]

include::derive-vertex-attribute.asciidoc[]

include::discard-edge-attributes.asciidoc[]

include::discard-edges.asciidoc[]

include::discard-loop-edges.asciidoc[]

include::discard-scalars.asciidoc[]

include::discard-segmentation-links.asciidoc[]

include::discard-segmentation.asciidoc[]

include::discard-vertex-attributes.asciidoc[]

include::discard-vertices.asciidoc[]

include::export-edge-attributes-to-database.asciidoc[]

include::export-edge-attributes-to-file.asciidoc[]

include::export-segmentation-to-database.asciidoc[]

include::export-segmentation-to-file.asciidoc[]

include::export-to-csv.asciidoc[]

include::export-to-jdbc.asciidoc[]

include::export-to-json.asciidoc[]

include::export-to-orc.asciidoc[]

include::export-to-parquet.asciidoc[]

include::export-vertex-attributes-to-database.asciidoc[]

include::export-vertex-attributes-to-file.asciidoc[]

include::expose-internal-edge-id.asciidoc[]

include::expose-internal-vertex-id.asciidoc[]

include::fill-edge-attribute-with-constant-default-value.asciidoc[]

include::fill-vertex-attribute-with-constant-default-value.asciidoc[]

include::filter-by-attributes.asciidoc[]

include::find-connected-components.asciidoc[]

include::find-infocom-communities.asciidoc[]

include::find-maximal-cliques.asciidoc[]

include::find-modular-clustering.asciidoc[]

include::find-shortest-path.asciidoc[]

include::find-triangles.asciidoc[]

include::fingerprint-based-on-attributes.asciidoc[]

include::grow-segmentation.asciidoc[]

include::hash-vertex-attribute.asciidoc[]

include::import-csv.asciidoc[]

include::import-edge-attributes.asciidoc[]

include::import-edges-for-existing-vertices.asciidoc[]

include::import-from-hive.asciidoc[]

include::import-jdbc.asciidoc[]

include::import-json.asciidoc[]

include::import-metagraph.asciidoc[]

include::import-orc.asciidoc[]

include::import-parquet.asciidoc[]

include::import-project-as-segmentation.asciidoc[]

include::import-segmentation-links.asciidoc[]

include::import-segmentation.asciidoc[]

include::import-vertex-attributes.asciidoc[]

include::import-vertices-and-edges-from-a-single-table.asciidoc[]

include::import-vertices.asciidoc[]

include::input-box.asciidoc[]

include::link-project-and-segmentation-by-fingerprint.asciidoc[]

include::load-snapshot.asciidoc[]

include::lookup-region.asciidoc[]

include::merge-parallel-edges-by-attribute.asciidoc[]

include::merge-parallel-edges.asciidoc[]

include::merge-parallel-segmentation-links.asciidoc[]

include::merge-two-edge-attributes.asciidoc[]

include::merge-two-vertex-attributes.asciidoc[]

include::merge-vertices-by-attribute.asciidoc[]

include::output-box.asciidoc[]

include::predict-attribute-by-viral-modeling.asciidoc[]

include::predict-from-model.asciidoc[]

include::predict-vertex-attribute.asciidoc[]

include::predict-with-a-neural-network-1st-version.asciidoc[]

include::pull-segmentation-one-level-up.asciidoc[]

include::reduce-vertex-attributes-to-two-dimensions.asciidoc[]

include::rename-edge-attribute.asciidoc[]

include::rename-scalar.asciidoc[]

include::rename-segmentation.asciidoc[]

include::rename-vertex-attribute.asciidoc[]

include::replace-edges-with-triadic-closure.asciidoc[]

include::replace-with-edge-graph.asciidoc[]

include::reverse-edge-direction.asciidoc[]

include::sample-edges-from-co-occurrence.asciidoc[]

include::sample-graph-by-random-walks.asciidoc[]

include::save-ui-status-as-graph-attribute.asciidoc[]

include::segment-by-double-attribute.asciidoc[]

include::segment-by-event-sequence.asciidoc[]

include::segment-by-geographical-proximity.asciidoc[]

include::segment-by-interval.asciidoc[]

include::segment-by-string-attribute.asciidoc[]

include::set-edge-attribute-icon.asciidoc[]

include::set-scalar-icon.asciidoc[]

include::set-segmentation-icon.asciidoc[]

include::set-vertex-attribute-icon.asciidoc[]

include::snowball-sample.asciidoc[]

include::split-edges.asciidoc[]

include::split-to-train-and-test-set.asciidoc[]

include::split-vertices.asciidoc[]

include::sql.asciidoc[]

include::take-edges-as-vertices.asciidoc[]

include::take-segmentation-as-base-project.asciidoc[]

include::take-segmentation-links-as-base-project.asciidoc[]

include::train-a-decision-tree-classification-model.asciidoc[]

include::train-a-decision-tree-regression-model.asciidoc[]

include::train-a-kmeans-clustering-model.asciidoc[]

include::train-a-logistic-regression-model.asciidoc[]

include::train-linear-regression-model.asciidoc[]

include::union-with-another-project.asciidoc[]

include::weighted-aggregate-edge-attribute-globally.asciidoc[]

include::weighted-aggregate-edge-attribute-to-vertices.asciidoc[]

include::weighted-aggregate-from-segmentation.asciidoc[]

include::weighted-aggregate-on-neighbors.asciidoc[]

include::weighted-aggregate-to-segmentation.asciidoc[]

include::weighted-aggregate-vertex-attribute-globally.asciidoc[]
