## Viral modeling

Viral modeling tries to predict unknown values of an attribute based on the known values of the
attribute on peers that belong to the same segments.

The parameters make it possible to put restrictions on which segments to consider. For each vertex
the segment with the lowest standard deviation will be picked. The prediction will be the
average value across this segment.

The operation repeats this procedure multiple times. Each time the predictions from the last
iteration are added to the accepted "truth", so it is possible to make predictions for vertices
where it was not possible previously. The coverage and error of the predictions is expected to
rise with the number of iterations.

// TODO: Present or link to example.

====
[[prefix]] Generated name prefix::
All the outputs from the operation will have this prefix.
// TODO: List and explain the generated outputs.

[[target]] Target attribute::
The attribute you want to predict.

[[test_set_ratio]] Test set ratio::
A test set is a random sample of the vertices. This parameter gives the size of the test set
as a fraction of the total vertex count.
+
The error of the predictions is calculated on the test set. The attribute values in the test
set are not used for making predictions.

[[seed]] Random seed for test set selection::
Random seed.
+
include::{g}[tag=random-seed]

[[max_deviation]] Maximal segment deviation::
Segments where the standard deviation of the attribute value over its members is higher than
this parameter will not be used for prediction.

[[min_num_defined]] Minimum number of defined attributes in a segment::
Segments where the number of vertices upon which the attribute is defined is less than this
parameter will not be used for prediction.

[[min_ratio_defined]] Minimal ratio of defined attributes in a segment::
Segments where the fraction of vertices upon which the attribute is defined is less than this
parameter will not be used for prediction.

[[iterations]] Iterations::
The number of iterations to perform. Each iteration builds upon the predictions of the previous
iteration, so the coverage and error is expected to rise with the number of iterations.
====
