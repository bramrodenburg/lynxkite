### Compute in Python

Executes custom Python code to define new attributes or scalars.

The following example computes two new vertex attributes (`x` and `y`),
a new edge attribute (`z`) and a new scalar (`hello`).
(You can try it on the <<Create example graph, example graph>> which
has the attributes used in this code.)

[source,python]
----
vs['x'] = 'The Honorable ' + vs.name
vs['y'] = vs.age ** 2
es['z'] = es.weight + es.comment.str.len()
scalars.hello = scalars.greeting.lower()
----

`vs` and `es` are both
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html[Pandas DataFrames].
You can write natural Python code and use the usual APIs and packages to
compute the new attributes. Assign them as new columns to these
DataFrames to save them.

`scalars` is a https://docs.python.org/3/library/types.html#types.SimpleNamespace[SimpleNamespace]
to make it easy to get and set scalars.

When you write this Python code, the input data may not be available yet.
And you may want to keep building on the output of the box without having
to wait for the Python code to execute. To make this possible, LynxKite has
to know the inputs and outputs of your code without executing it.
You can specify them through the _Inputs_ and _Outputs_ parameters.
For outputs you must also declare their types.

The currently supported types for outputs are:

- `float` to create a `Double`-typed attribute or scalar.
- `str` to create a `String`-typed attribute or scalar.

====
[p-code]#Code#::
The Python code you want to run. See the operation description for details.

[p-inputs]#Inputs#::
A comma-separated list of attributes and scalars that your code wants to use.
For example, `vs.my_attribute, vs.another_attribute, scalars.my_scalar`.

[p-outputs]#Outputs#::
A comma-separated list of attributes and scalars that your code generates.
These must be annotated with the type of the attribute or scalar.
For example, `vs.my_new_attribute: str, vs.another_new_attribute: float, scalars.my_new_scalar: str`.
====
