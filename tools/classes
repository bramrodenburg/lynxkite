#!/usr/bin/env python
"""Lists non-abstract subclasses of a class in a file after a superficial parsing.

Usage:
  python classes.py SomethingSomething.scala TypedMetaGraphOp
"""
import sys

fn = sys.argv[1]
wantedclass = sys.argv[2]
with file(fn) as f:
  words = f.read().split()

def token(word):
 return word.split('(')[0].split('[')[0]

superclass = {}
curclass = None
concrete = []
for i in range(1, len(words) - 1):
  if words[i] == 'class':
    curclass = token(words[i + 1])
    if words[i - 1] != 'abstract':
      concrete.append(curclass)
  if words[i] == 'extends':
    superclass[curclass] = token(words[i + 1])

def wanted(cls):
  return cls != None and (cls == wantedclass or wanted(superclass.get(cls)))

for cls in concrete:
  if wanted(cls):
    print cls
